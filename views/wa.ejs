<%- include('partials/header') %>

<div class="d-flex">
  <%- include('partials/sidebar') %>

  <div class="flex-fill p-4" id="mainContent">
    <nav class="d-flex justify-content-end mb-3">
      <div class="me-3 text-end">
        <div id="nav-user-name" class="fw-bold small">—</div>
        <div id="nav-user-role" class="small text-muted">—</div>
      </div>
      <button id="btn-logout-top" class="btn btn-outline-danger btn-sm">Logout</button>
    </nav>

    <div id="pageContent">
      <div class="card mb-3">
        <div class="card-body text-center">
          <h5 class="mb-1">QR Authentication</h5>
          <div id="qrBox" class="my-3">
            <img id="qrImage" src="" alt="QR" style="max-width:300px; display:none;">
            <pre id="qrRaw" class="small text-muted" style="display:none;"></pre>
          </div>
          <div>
            <button id="btn-refresh-qr" class="btn btn-outline-secondary btn-sm">Refresh QR</button>
            <button id="btn-logout-wa" class="btn btn-danger btn-sm">Force Logout WA</button>
          </div>
          <div id="waState" class="mt-2 small text-muted">Connection: —</div>
        </div>
      </div>

      <div id="adminPages"></div>
    </div>
  </div>
</div>

<!-- User Modal -->
<div class="modal fade" id="userModal" tabindex="-1" aria-labelledby="userModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <form id="userModalForm" class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="userModalLabel">Buat User</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Tutup"></button>
      </div>
      <div class="modal-body">
        <input type="hidden" name="id" value="">
        <div class="mb-3">
          <label class="form-label">Username</label>
          <input name="username" class="form-control" required>
        </div>
        <div class="mb-3">
          <label class="form-label">Email</label>
          <input name="email" type="email" class="form-control" required>
        </div>
        <div class="mb-3">
          <label class="form-label">Password</label>
          <input name="password" type="password" class="form-control" placeholder="Kosongkan jika tidak diubah">
        </div>
        <div class="mb-3">
          <label class="form-label">Role</label>
          <select name="role" class="form-select">
            <option value="member">member</option>
            <option value="admin">admin</option>
          </select>
        </div>
        <div class="form-check form-switch">
          <input class="form-check-input" type="checkbox" id="userPremium" name="premium">
          <label class="form-check-label" for="userPremium">Premium</label>
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Batal</button>
        <button type="submit" class="btn btn-primary" id="userModalSaveBtn">Simpan</button>
      </div>
    </form>
  </div>
</div>

<% scripts = `
<script>
// Pastikan socket.io sudah dimuat di layout utama
document.addEventListener('DOMContentLoaded', () => {
    const socket = io();
    const qrImage = document.getElementById('qrImage');
    const waState = document.getElementById('waState');

    let qrRefreshInterval = null;

    // Fungsi untuk load QR manual / auto
    function loadQR() {
        fetch('/wa/qr', { 
            headers: { 'Authorization': 'Bearer ' + localStorage.getItem('token') }
        })
        .then(res => res.json())
        .then(data => {
            if (data.ok && data.qr) {
                const qrUrl = 'https://api.qrserver.com/v1/create-qr-code/?size=300x300&data=' + encodeURIComponent(data.qr);
                qrImage.src = qrUrl;
                qrImage.style.display = 'block';
                waState.textContent = 'Connection: QR Code available';
            } else {
                qrImage.style.display = 'none';
                waState.textContent = 'Connection: No QR available';
            }
        })
        .catch(() => {
            waState.textContent = 'Connection: Failed to fetch QR';
        });
    }

    // Event QR dari server (realtime)
    socket.on('qr', qr => {
        const qrUrl = 'https://api.qrserver.com/v1/create-qr-code/?size=300x300&data=' + encodeURIComponent(qr);
        qrImage.src = qrUrl;
        qrImage.style.display = 'block';
        waState.textContent = 'Connection: QR Code available (socket)';
    });

    // Event status koneksi WA
    socket.on('wa-status', status => {
        waState.textContent = 'Connection: ' + status;
        if (status === 'connected') {
            qrImage.style.display = 'none';
            if (qrRefreshInterval) {
                clearInterval(qrRefreshInterval);
                qrRefreshInterval = null;
            }
        } else if (status === 'disconnected' || status === 'qr') {
            if (!qrRefreshInterval) {
                loadQR(); // Ambil QR langsung
                qrRefreshInterval = setInterval(loadQR, 20000); // Refresh tiap 20 detik
            }
        }
    });

    // Tombol refresh QR manual
    document.getElementById('btn-refresh-qr').addEventListener('click', () => {
        loadQR();
    });

    // Tombol force logout WA
    document.getElementById('btn-logout-wa').addEventListener('click', () => {
        fetch('/wa/logout', { 
            method: 'DELETE',
            headers: { 'Authorization': 'Bearer ' + localStorage.getItem('token') }
        })
        .then(res => res.json())
        .then(data => {
            if (data.ok) {
                alert('WhatsApp berhasil logout.');
                loadQR();
            } else {
                alert('Gagal logout WhatsApp.');
            }
        })
        .catch(() => alert('Error saat logout.'));
    });

    // Logout admin panel
    document.getElementById('btn-logout-top').addEventListener('click', () => {
        localStorage.removeItem('token');
        window.location.href = '/';
    });

    // Cek status WA awal saat halaman dibuka
    fetch('/wa/status', { 
        headers: { 'Authorization': 'Bearer ' + localStorage.getItem('token') }
    })
    .then(res => res.json())
    .then(data => {
        if (data.ok) {
            waState.textContent = 'Connection: ' + data.status;
            if (data.status !== 'connected') {
                loadQR();
                qrRefreshInterval = setInterval(loadQR, 20000);
            }
        }
    });
}); 
</script> 
%>
